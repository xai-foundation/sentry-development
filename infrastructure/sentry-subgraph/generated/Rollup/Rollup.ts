// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NodeConfirmed extends ethereum.Event {
  get params(): NodeConfirmed__Params {
    return new NodeConfirmed__Params(this);
  }
}

export class NodeConfirmed__Params {
  _event: NodeConfirmed;

  constructor(event: NodeConfirmed) {
    this._event = event;
  }

  get nodeNum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sendRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class NodeCreated extends ethereum.Event {
  get params(): NodeCreated__Params {
    return new NodeCreated__Params(this);
  }
}

export class NodeCreated__Params {
  _event: NodeCreated;

  constructor(event: NodeCreated) {
    this._event = event;
  }

  get nodeNum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get parentNodeHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get nodeHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get executionHash(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get assertion(): NodeCreatedAssertionStruct {
    return changetype<NodeCreatedAssertionStruct>(
      this._event.parameters[4].value.toTuple(),
    );
  }

  get afterInboxBatchAcc(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get wasmModuleRoot(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get inboxMaxCount(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class NodeCreatedAssertionStruct extends ethereum.Tuple {
  get beforeState(): NodeCreatedAssertionBeforeStateStruct {
    return changetype<NodeCreatedAssertionBeforeStateStruct>(this[0].toTuple());
  }

  get afterState(): NodeCreatedAssertionAfterStateStruct {
    return changetype<NodeCreatedAssertionAfterStateStruct>(this[1].toTuple());
  }

  get numBlocks(): BigInt {
    return this[2].toBigInt();
  }
}

export class NodeCreatedAssertionBeforeStateStruct extends ethereum.Tuple {
  get globalState(): NodeCreatedAssertionBeforeStateGlobalStateStruct {
    return changetype<NodeCreatedAssertionBeforeStateGlobalStateStruct>(
      this[0].toTuple(),
    );
  }

  get machineStatus(): i32 {
    return this[1].toI32();
  }
}

export class NodeCreatedAssertionBeforeStateGlobalStateStruct extends ethereum.Tuple {
  get bytes32Vals(): Array<Bytes> {
    return this[0].toBytesArray();
  }

  get u64Vals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class NodeCreatedAssertionAfterStateStruct extends ethereum.Tuple {
  get globalState(): NodeCreatedAssertionAfterStateGlobalStateStruct {
    return changetype<NodeCreatedAssertionAfterStateGlobalStateStruct>(
      this[0].toTuple(),
    );
  }

  get machineStatus(): i32 {
    return this[1].toI32();
  }
}

export class NodeCreatedAssertionAfterStateGlobalStateStruct extends ethereum.Tuple {
  get bytes32Vals(): Array<Bytes> {
    return this[0].toBytesArray();
  }

  get u64Vals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }
}

export class NodeRejected extends ethereum.Event {
  get params(): NodeRejected__Params {
    return new NodeRejected__Params(this);
  }
}

export class NodeRejected__Params {
  _event: NodeRejected;

  constructor(event: NodeRejected) {
    this._event = event;
  }

  get nodeNum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RollupChallengeStarted extends ethereum.Event {
  get params(): RollupChallengeStarted__Params {
    return new RollupChallengeStarted__Params(this);
  }
}

export class RollupChallengeStarted__Params {
  _event: RollupChallengeStarted;

  constructor(event: RollupChallengeStarted) {
    this._event = event;
  }

  get challengeIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asserter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get challenger(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get challengedNode(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RollupInitialized extends ethereum.Event {
  get params(): RollupInitialized__Params {
    return new RollupInitialized__Params(this);
  }
}

export class RollupInitialized__Params {
  _event: RollupInitialized;

  constructor(event: RollupInitialized) {
    this._event = event;
  }

  get machineHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get chainId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UserStakeUpdated extends ethereum.Event {
  get params(): UserStakeUpdated__Params {
    return new UserStakeUpdated__Params(this);
  }
}

export class UserStakeUpdated__Params {
  _event: UserStakeUpdated;

  constructor(event: UserStakeUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initialBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserWithdrawableFundsUpdated extends ethereum.Event {
  get params(): UserWithdrawableFundsUpdated__Params {
    return new UserWithdrawableFundsUpdated__Params(this);
  }
}

export class UserWithdrawableFundsUpdated__Params {
  _event: UserWithdrawableFundsUpdated;

  constructor(event: UserWithdrawableFundsUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get initialBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Rollup___stakerMapResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getAmountStaked(): BigInt {
    return this.value0;
  }

  getIndex(): BigInt {
    return this.value1;
  }

  getLatestStakedNode(): BigInt {
    return this.value2;
  }

  getCurrentChallenge(): BigInt {
    return this.value3;
  }

  getIsStaked(): boolean {
    return this.value4;
  }
}

export class Rollup__getNodeResultValue0Struct extends ethereum.Tuple {
  get stateHash(): Bytes {
    return this[0].toBytes();
  }

  get challengeHash(): Bytes {
    return this[1].toBytes();
  }

  get confirmData(): Bytes {
    return this[2].toBytes();
  }

  get prevNum(): BigInt {
    return this[3].toBigInt();
  }

  get deadlineBlock(): BigInt {
    return this[4].toBigInt();
  }

  get noChildConfirmedBeforeBlock(): BigInt {
    return this[5].toBigInt();
  }

  get stakerCount(): BigInt {
    return this[6].toBigInt();
  }

  get childStakerCount(): BigInt {
    return this[7].toBigInt();
  }

  get firstChildBlock(): BigInt {
    return this[8].toBigInt();
  }

  get latestChildNumber(): BigInt {
    return this[9].toBigInt();
  }

  get createdAtBlock(): BigInt {
    return this[10].toBigInt();
  }

  get nodeHash(): Bytes {
    return this[11].toBytes();
  }
}

export class Rollup__getStakerResultValue0Struct extends ethereum.Tuple {
  get amountStaked(): BigInt {
    return this[0].toBigInt();
  }

  get index(): BigInt {
    return this[1].toBigInt();
  }

  get latestStakedNode(): BigInt {
    return this[2].toBigInt();
  }

  get currentChallenge(): BigInt {
    return this[3].toBigInt();
  }

  get isStaked(): boolean {
    return this[4].toBoolean();
  }
}

export class Rollup extends ethereum.SmartContract {
  static bind(address: Address): Rollup {
    return new Rollup("Rollup", address);
  }

  _stakerMap(param0: Address): Rollup___stakerMapResult {
    let result = super.call(
      "_stakerMap",
      "_stakerMap(address):(uint256,uint64,uint64,uint64,bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Rollup___stakerMapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
    );
  }

  try__stakerMap(
    param0: Address,
  ): ethereum.CallResult<Rollup___stakerMapResult> {
    let result = super.tryCall(
      "_stakerMap",
      "_stakerMap(address):(uint256,uint64,uint64,uint64,bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Rollup___stakerMapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
      ),
    );
  }

  amountStaked(staker: Address): BigInt {
    let result = super.call("amountStaked", "amountStaked(address):(uint256)", [
      ethereum.Value.fromAddress(staker),
    ]);

    return result[0].toBigInt();
  }

  try_amountStaked(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountStaked",
      "amountStaked(address):(uint256)",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseStake(): BigInt {
    let result = super.call("baseStake", "baseStake():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseStake(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseStake", "baseStake():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bridge(): Address {
    let result = super.call("bridge", "bridge():(address)", []);

    return result[0].toAddress();
  }

  try_bridge(): ethereum.CallResult<Address> {
    let result = super.tryCall("bridge", "bridge():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  chainId(): BigInt {
    let result = super.call("chainId", "chainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_chainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("chainId", "chainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengeManager(): Address {
    let result = super.call(
      "challengeManager",
      "challengeManager():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_challengeManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "challengeManager",
      "challengeManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  confirmPeriodBlocks(): BigInt {
    let result = super.call(
      "confirmPeriodBlocks",
      "confirmPeriodBlocks():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_confirmPeriodBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "confirmPeriodBlocks",
      "confirmPeriodBlocks():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentChallenge(staker: Address): BigInt {
    let result = super.call(
      "currentChallenge",
      "currentChallenge(address):(uint64)",
      [ethereum.Value.fromAddress(staker)],
    );

    return result[0].toBigInt();
  }

  try_currentChallenge(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentChallenge",
      "currentChallenge(address):(uint64)",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  extraChallengeTimeBlocks(): BigInt {
    let result = super.call(
      "extraChallengeTimeBlocks",
      "extraChallengeTimeBlocks():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_extraChallengeTimeBlocks(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "extraChallengeTimeBlocks",
      "extraChallengeTimeBlocks():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstUnresolvedNode(): BigInt {
    let result = super.call(
      "firstUnresolvedNode",
      "firstUnresolvedNode():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_firstUnresolvedNode(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstUnresolvedNode",
      "firstUnresolvedNode():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNode(nodeNum: BigInt): Rollup__getNodeResultValue0Struct {
    let result = super.call(
      "getNode",
      "getNode(uint64):((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))",
      [ethereum.Value.fromUnsignedBigInt(nodeNum)],
    );

    return changetype<Rollup__getNodeResultValue0Struct>(result[0].toTuple());
  }

  try_getNode(
    nodeNum: BigInt,
  ): ethereum.CallResult<Rollup__getNodeResultValue0Struct> {
    let result = super.tryCall(
      "getNode",
      "getNode(uint64):((bytes32,bytes32,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,bytes32))",
      [ethereum.Value.fromUnsignedBigInt(nodeNum)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Rollup__getNodeResultValue0Struct>(value[0].toTuple()),
    );
  }

  getNodeCreationBlockForLogLookup(nodeNum: BigInt): BigInt {
    let result = super.call(
      "getNodeCreationBlockForLogLookup",
      "getNodeCreationBlockForLogLookup(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nodeNum)],
    );

    return result[0].toBigInt();
  }

  try_getNodeCreationBlockForLogLookup(
    nodeNum: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNodeCreationBlockForLogLookup",
      "getNodeCreationBlockForLogLookup(uint64):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(nodeNum)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStaker(staker: Address): Rollup__getStakerResultValue0Struct {
    let result = super.call(
      "getStaker",
      "getStaker(address):((uint256,uint64,uint64,uint64,bool))",
      [ethereum.Value.fromAddress(staker)],
    );

    return changetype<Rollup__getStakerResultValue0Struct>(result[0].toTuple());
  }

  try_getStaker(
    staker: Address,
  ): ethereum.CallResult<Rollup__getStakerResultValue0Struct> {
    let result = super.tryCall(
      "getStaker",
      "getStaker(address):((uint256,uint64,uint64,uint64,bool))",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Rollup__getStakerResultValue0Struct>(value[0].toTuple()),
    );
  }

  getStakerAddress(stakerNum: BigInt): Address {
    let result = super.call(
      "getStakerAddress",
      "getStakerAddress(uint64):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakerNum)],
    );

    return result[0].toAddress();
  }

  try_getStakerAddress(stakerNum: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStakerAddress",
      "getStakerAddress(uint64):(address)",
      [ethereum.Value.fromUnsignedBigInt(stakerNum)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inbox(): Address {
    let result = super.call("inbox", "inbox():(address)", []);

    return result[0].toAddress();
  }

  try_inbox(): ethereum.CallResult<Address> {
    let result = super.tryCall("inbox", "inbox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isStaked(staker: Address): boolean {
    let result = super.call("isStaked", "isStaked(address):(bool)", [
      ethereum.Value.fromAddress(staker),
    ]);

    return result[0].toBoolean();
  }

  try_isStaked(staker: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isStaked", "isStaked(address):(bool)", [
      ethereum.Value.fromAddress(staker),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isStakedOnLatestConfirmed(staker: Address): boolean {
    let result = super.call(
      "isStakedOnLatestConfirmed",
      "isStakedOnLatestConfirmed(address):(bool)",
      [ethereum.Value.fromAddress(staker)],
    );

    return result[0].toBoolean();
  }

  try_isStakedOnLatestConfirmed(staker: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStakedOnLatestConfirmed",
      "isStakedOnLatestConfirmed(address):(bool)",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidator(param0: Address): boolean {
    let result = super.call("isValidator", "isValidator(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isValidator(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidator", "isValidator(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isZombie(staker: Address): boolean {
    let result = super.call("isZombie", "isZombie(address):(bool)", [
      ethereum.Value.fromAddress(staker),
    ]);

    return result[0].toBoolean();
  }

  try_isZombie(staker: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isZombie", "isZombie(address):(bool)", [
      ethereum.Value.fromAddress(staker),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastStakeBlock(): BigInt {
    let result = super.call("lastStakeBlock", "lastStakeBlock():(uint64)", []);

    return result[0].toBigInt();
  }

  try_lastStakeBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastStakeBlock",
      "lastStakeBlock():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestConfirmed(): BigInt {
    let result = super.call(
      "latestConfirmed",
      "latestConfirmed():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestConfirmed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestConfirmed",
      "latestConfirmed():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestNodeCreated(): BigInt {
    let result = super.call(
      "latestNodeCreated",
      "latestNodeCreated():(uint64)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestNodeCreated(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestNodeCreated",
      "latestNodeCreated():(uint64)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestStakedNode(staker: Address): BigInt {
    let result = super.call(
      "latestStakedNode",
      "latestStakedNode(address):(uint64)",
      [ethereum.Value.fromAddress(staker)],
    );

    return result[0].toBigInt();
  }

  try_latestStakedNode(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestStakedNode",
      "latestStakedNode(address):(uint64)",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loserStakeEscrow(): Address {
    let result = super.call(
      "loserStakeEscrow",
      "loserStakeEscrow():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_loserStakeEscrow(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loserStakeEscrow",
      "loserStakeEscrow():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minimumAssertionPeriod(): BigInt {
    let result = super.call(
      "minimumAssertionPeriod",
      "minimumAssertionPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minimumAssertionPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumAssertionPeriod",
      "minimumAssertionPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeHasStaker(nodeNum: BigInt, staker: Address): boolean {
    let result = super.call(
      "nodeHasStaker",
      "nodeHasStaker(uint64,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nodeNum),
        ethereum.Value.fromAddress(staker),
      ],
    );

    return result[0].toBoolean();
  }

  try_nodeHasStaker(
    nodeNum: BigInt,
    staker: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "nodeHasStaker",
      "nodeHasStaker(uint64,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(nodeNum),
        ethereum.Value.fromAddress(staker),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  outbox(): Address {
    let result = super.call("outbox", "outbox():(address)", []);

    return result[0].toAddress();
  }

  try_outbox(): ethereum.CallResult<Address> {
    let result = super.tryCall("outbox", "outbox():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rollupDeploymentBlock(): BigInt {
    let result = super.call(
      "rollupDeploymentBlock",
      "rollupDeploymentBlock():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_rollupDeploymentBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rollupDeploymentBlock",
      "rollupDeploymentBlock():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rollupEventInbox(): Address {
    let result = super.call(
      "rollupEventInbox",
      "rollupEventInbox():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_rollupEventInbox(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rollupEventInbox",
      "rollupEventInbox():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sequencerInbox(): Address {
    let result = super.call("sequencerInbox", "sequencerInbox():(address)", []);

    return result[0].toAddress();
  }

  try_sequencerInbox(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sequencerInbox",
      "sequencerInbox():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeToken(): Address {
    let result = super.call("stakeToken", "stakeToken():(address)", []);

    return result[0].toAddress();
  }

  try_stakeToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("stakeToken", "stakeToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakerCount(): BigInt {
    let result = super.call("stakerCount", "stakerCount():(uint64)", []);

    return result[0].toBigInt();
  }

  try_stakerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakerCount", "stakerCount():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawableFunds(): BigInt {
    let result = super.call(
      "totalWithdrawableFunds",
      "totalWithdrawableFunds():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawableFunds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawableFunds",
      "totalWithdrawableFunds():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorUtils(): Address {
    let result = super.call("validatorUtils", "validatorUtils():(address)", []);

    return result[0].toAddress();
  }

  try_validatorUtils(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorUtils",
      "validatorUtils():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorWalletCreator(): Address {
    let result = super.call(
      "validatorWalletCreator",
      "validatorWalletCreator():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_validatorWalletCreator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorWalletCreator",
      "validatorWalletCreator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorWhitelistDisabled(): boolean {
    let result = super.call(
      "validatorWhitelistDisabled",
      "validatorWhitelistDisabled():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_validatorWhitelistDisabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorWhitelistDisabled",
      "validatorWhitelistDisabled():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wasmModuleRoot(): Bytes {
    let result = super.call("wasmModuleRoot", "wasmModuleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_wasmModuleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "wasmModuleRoot",
      "wasmModuleRoot():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  withdrawableFunds(user: Address): BigInt {
    let result = super.call(
      "withdrawableFunds",
      "withdrawableFunds(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_withdrawableFunds(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawableFunds",
      "withdrawableFunds(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  zombieAddress(zombieNum: BigInt): Address {
    let result = super.call(
      "zombieAddress",
      "zombieAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(zombieNum)],
    );

    return result[0].toAddress();
  }

  try_zombieAddress(zombieNum: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "zombieAddress",
      "zombieAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(zombieNum)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  zombieCount(): BigInt {
    let result = super.call("zombieCount", "zombieCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_zombieCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("zombieCount", "zombieCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  zombieLatestStakedNode(zombieNum: BigInt): BigInt {
    let result = super.call(
      "zombieLatestStakedNode",
      "zombieLatestStakedNode(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(zombieNum)],
    );

    return result[0].toBigInt();
  }

  try_zombieLatestStakedNode(zombieNum: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "zombieLatestStakedNode",
      "zombieLatestStakedNode(uint256):(uint64)",
      [ethereum.Value.fromUnsignedBigInt(zombieNum)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}
