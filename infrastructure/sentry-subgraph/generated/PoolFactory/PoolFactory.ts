// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ClaimFromPool extends ethereum.Event {
  get params(): ClaimFromPool__Params {
    return new ClaimFromPool__Params(this);
  }
}

export class ClaimFromPool__Params {
  _event: ClaimFromPool;

  constructor(event: ClaimFromPool) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get poolIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get stakedKeyCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PoolCreatedV2 extends ethereum.Event {
  get params(): PoolCreatedV2__Params {
    return new PoolCreatedV2__Params(this);
  }
}

export class PoolCreatedV2__Params {
  _event: PoolCreatedV2;

  constructor(event: PoolCreatedV2) {
    this._event = event;
  }

  get poolIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get poolOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get stakedKeyCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get delegateAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get keyIds(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get shareConfig(): Array<BigInt> {
    return this._event.parameters[6].value.toBigIntArray();
  }

  get poolMetadata(): Array<string> {
    return this._event.parameters[7].value.toStringArray();
  }

  get poolSocials(): Array<string> {
    return this._event.parameters[8].value.toStringArray();
  }
}

export class PoolProxyDeployerUpdated extends ethereum.Event {
  get params(): PoolProxyDeployerUpdated__Params {
    return new PoolProxyDeployerUpdated__Params(this);
  }
}

export class PoolProxyDeployerUpdated__Params {
  _event: PoolProxyDeployerUpdated;

  constructor(event: PoolProxyDeployerUpdated) {
    this._event = event;
  }

  get oldDeployer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newDeployer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StakeEsXai extends ethereum.Event {
  get params(): StakeEsXai__Params {
    return new StakeEsXai__Params(this);
  }
}

export class StakeEsXai__Params {
  _event: StakeEsXai;

  constructor(event: StakeEsXai) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserEsXaiStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalEsXaiStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakeKeys extends ethereum.Event {
  get params(): StakeKeys__Params {
    return new StakeKeys__Params(this);
  }
}

export class StakeKeys__Params {
  _event: StakeKeys;

  constructor(event: StakeKeys) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserKeysStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalKeysStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakeKeysV2 extends ethereum.Event {
  get params(): StakeKeysV2__Params {
    return new StakeKeysV2__Params(this);
  }
}

export class StakeKeysV2__Params {
  _event: StakeKeysV2;

  constructor(event: StakeKeysV2) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserKeysStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalKeysStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get keyIds(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }
}

export class StakingEnabled extends ethereum.Event {
  get params(): StakingEnabled__Params {
    return new StakingEnabled__Params(this);
  }
}

export class StakingEnabled__Params {
  _event: StakingEnabled;

  constructor(event: StakingEnabled) {
    this._event = event;
  }
}

export class UnstakeEsXai extends ethereum.Event {
  get params(): UnstakeEsXai__Params {
    return new UnstakeEsXai__Params(this);
  }
}

export class UnstakeEsXai__Params {
  _event: UnstakeEsXai;

  constructor(event: UnstakeEsXai) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserEsXaiStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalEsXaiStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UnstakeEsXaiV2 extends ethereum.Event {
  get params(): UnstakeEsXaiV2__Params {
    return new UnstakeEsXaiV2__Params(this);
  }
}

export class UnstakeEsXaiV2__Params {
  _event: UnstakeEsXaiV2;

  constructor(event: UnstakeEsXaiV2) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserEsXaiStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalEsXaiStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get requestIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class UnstakeKeys extends ethereum.Event {
  get params(): UnstakeKeys__Params {
    return new UnstakeKeys__Params(this);
  }
}

export class UnstakeKeys__Params {
  _event: UnstakeKeys;

  constructor(event: UnstakeKeys) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserKeysStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalKeysStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UnstakeKeysV2 extends ethereum.Event {
  get params(): UnstakeKeysV2__Params {
    return new UnstakeKeysV2__Params(this);
  }
}

export class UnstakeKeysV2__Params {
  _event: UnstakeKeysV2;

  constructor(event: UnstakeKeysV2) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalUserKeysStaked(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalKeysStaked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get requestIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get keyIds(): Array<BigInt> {
    return this._event.parameters[6].value.toBigIntArray();
  }
}

export class UnstakeRequestStarted extends ethereum.Event {
  get params(): UnstakeRequestStarted__Params {
    return new UnstakeRequestStarted__Params(this);
  }
}

export class UnstakeRequestStarted__Params {
  _event: UnstakeRequestStarted;

  constructor(event: UnstakeRequestStarted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isKey(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class UpdateDelayPeriods extends ethereum.Event {
  get params(): UpdateDelayPeriods__Params {
    return new UpdateDelayPeriods__Params(this);
  }
}

export class UpdateDelayPeriods__Params {
  _event: UpdateDelayPeriods;

  constructor(event: UpdateDelayPeriods) {
    this._event = event;
  }
}

export class UpdateMetadata extends ethereum.Event {
  get params(): UpdateMetadata__Params {
    return new UpdateMetadata__Params(this);
  }
}

export class UpdateMetadata__Params {
  _event: UpdateMetadata;

  constructor(event: UpdateMetadata) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateMetadataV2 extends ethereum.Event {
  get params(): UpdateMetadataV2__Params {
    return new UpdateMetadataV2__Params(this);
  }
}

export class UpdateMetadataV2__Params {
  _event: UpdateMetadataV2;

  constructor(event: UpdateMetadataV2) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get poolMetadata(): Array<string> {
    return this._event.parameters[1].value.toStringArray();
  }

  get poolSocials(): Array<string> {
    return this._event.parameters[2].value.toStringArray();
  }
}

export class UpdatePoolDelegate extends ethereum.Event {
  get params(): UpdatePoolDelegate__Params {
    return new UpdatePoolDelegate__Params(this);
  }
}

export class UpdatePoolDelegate__Params {
  _event: UpdatePoolDelegate;

  constructor(event: UpdatePoolDelegate) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateShares extends ethereum.Event {
  get params(): UpdateShares__Params {
    return new UpdateShares__Params(this);
  }
}

export class UpdateShares__Params {
  _event: UpdateShares;

  constructor(event: UpdateShares) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateSharesV2 extends ethereum.Event {
  get params(): UpdateSharesV2__Params {
    return new UpdateSharesV2__Params(this);
  }
}

export class UpdateSharesV2__Params {
  _event: UpdateSharesV2;

  constructor(event: UpdateSharesV2) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shareConfig(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolFactory {
    return new PoolFactory("PoolFactory", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  STAKE_KEYS_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "STAKE_KEYS_ADMIN_ROLE",
      "STAKE_KEYS_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_STAKE_KEYS_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STAKE_KEYS_ADMIN_ROLE",
      "STAKE_KEYS_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bucketshareMaxValues(param0: BigInt): BigInt {
    let result = super.call(
      "bucketshareMaxValues",
      "bucketshareMaxValues(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_bucketshareMaxValues(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bucketshareMaxValues",
      "bucketshareMaxValues(uint256):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkKeysAreStaked(keyIds: Array<BigInt>): Array<boolean> {
    let result = super.call(
      "checkKeysAreStaked",
      "checkKeysAreStaked(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(keyIds)],
    );

    return result[0].toBooleanArray();
  }

  try_checkKeysAreStaked(
    keyIds: Array<BigInt>,
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "checkKeysAreStaked",
      "checkKeysAreStaked(uint256[]):(bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(keyIds)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }

  deployerAddress(): Address {
    let result = super.call(
      "deployerAddress",
      "deployerAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_deployerAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployerAddress",
      "deployerAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  esXaiAddress(): Address {
    let result = super.call("esXaiAddress", "esXaiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_esXaiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("esXaiAddress", "esXaiAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  failedKyc(param0: Address): boolean {
    let result = super.call("failedKyc", "failedKyc(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_failedKyc(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("failedKyc", "failedKyc(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDelegatePools(delegate: Address): Array<Address> {
    let result = super.call(
      "getDelegatePools",
      "getDelegatePools(address):(address[])",
      [ethereum.Value.fromAddress(delegate)],
    );

    return result[0].toAddressArray();
  }

  try_getDelegatePools(delegate: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDelegatePools",
      "getDelegatePools(address):(address[])",
      [ethereum.Value.fromAddress(delegate)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPoolAddress(poolIndex: BigInt): Address {
    let result = super.call(
      "getPoolAddress",
      "getPoolAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(poolIndex)],
    );

    return result[0].toAddress();
  }

  try_getPoolAddress(poolIndex: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolAddress",
      "getPoolAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(poolIndex)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolAddressOfUser(user: Address, index: BigInt): Address {
    let result = super.call(
      "getPoolAddressOfUser",
      "getPoolAddressOfUser(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toAddress();
  }

  try_getPoolAddressOfUser(
    user: Address,
    index: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPoolAddressOfUser",
      "getPoolAddressOfUser(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolIndicesOfUser(user: Address): Array<Address> {
    let result = super.call(
      "getPoolIndicesOfUser",
      "getPoolIndicesOfUser(address):(address[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toAddressArray();
  }

  try_getPoolIndicesOfUser(user: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPoolIndicesOfUser",
      "getPoolIndicesOfUser(address):(address[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPoolsCount(): BigInt {
    let result = super.call("getPoolsCount", "getPoolsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolsCount",
      "getPoolsCount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolsOfUserCount(user: Address): BigInt {
    let result = super.call(
      "getPoolsOfUserCount",
      "getPoolsOfUserCount(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getPoolsOfUserCount(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolsOfUserCount",
      "getPoolsOfUserCount(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)],
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalesXaiStakedByUser(user: Address): BigInt {
    let result = super.call(
      "getTotalesXaiStakedByUser",
      "getTotalesXaiStakedByUser(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getTotalesXaiStakedByUser(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalesXaiStakedByUser",
      "getTotalesXaiStakedByUser(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnstakedKeyIdsFromUser(
    user: Address,
    offset: i32,
    pageLimit: i32,
  ): Array<BigInt> {
    let result = super.call(
      "getUnstakedKeyIdsFromUser",
      "getUnstakedKeyIdsFromUser(address,uint16,uint16):(uint256[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offset)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pageLimit)),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_getUnstakedKeyIdsFromUser(
    user: Address,
    offset: i32,
    pageLimit: i32,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUnstakedKeyIdsFromUser",
      "getUnstakedKeyIdsFromUser(address,uint16,uint16):(uint256[])",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(offset)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(pageLimit)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interactedPoolsOfUser(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "interactedPoolsOfUser",
      "interactedPoolsOfUser(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_interactedPoolsOfUser(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "interactedPoolsOfUser",
      "interactedPoolsOfUser(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isDelegateOfPoolOrOwner(delegate: Address, pool: Address): boolean {
    let result = super.call(
      "isDelegateOfPoolOrOwner",
      "isDelegateOfPoolOrOwner(address,address):(bool)",
      [ethereum.Value.fromAddress(delegate), ethereum.Value.fromAddress(pool)],
    );

    return result[0].toBoolean();
  }

  try_isDelegateOfPoolOrOwner(
    delegate: Address,
    pool: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDelegateOfPoolOrOwner",
      "isDelegateOfPoolOrOwner(address,address):(bool)",
      [ethereum.Value.fromAddress(delegate), ethereum.Value.fromAddress(pool)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nodeLicenseAddress(): Address {
    let result = super.call(
      "nodeLicenseAddress",
      "nodeLicenseAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_nodeLicenseAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nodeLicenseAddress",
      "nodeLicenseAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolsCreatedViaFactory(param0: Address): boolean {
    let result = super.call(
      "poolsCreatedViaFactory",
      "poolsCreatedViaFactory(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_poolsCreatedViaFactory(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "poolsCreatedViaFactory",
      "poolsCreatedViaFactory(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  poolsOfDelegate(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "poolsOfDelegate",
      "poolsOfDelegate(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_poolsOfDelegate(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "poolsOfDelegate",
      "poolsOfDelegate(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolsOfDelegateIndices(param0: Address): BigInt {
    let result = super.call(
      "poolsOfDelegateIndices",
      "poolsOfDelegateIndices(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_poolsOfDelegateIndices(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolsOfDelegateIndices",
      "poolsOfDelegateIndices(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refereeAddress(): Address {
    let result = super.call("refereeAddress", "refereeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_refereeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "refereeAddress",
      "refereeAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingEnabled(): boolean {
    let result = super.call("stakingEnabled", "stakingEnabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_stakingEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("stakingEnabled", "stakingEnabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakingPools(param0: BigInt): Address {
    let result = super.call("stakingPools", "stakingPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_stakingPools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingPools",
      "stakingPools(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalEsXaiStakeCalculated(param0: Address): boolean {
    let result = super.call(
      "totalEsXaiStakeCalculated",
      "totalEsXaiStakeCalculated(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_totalEsXaiStakeCalculated(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "totalEsXaiStakeCalculated",
      "totalEsXaiStakeCalculated(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unstakeEsXaiDelayPeriod(): BigInt {
    let result = super.call(
      "unstakeEsXaiDelayPeriod",
      "unstakeEsXaiDelayPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_unstakeEsXaiDelayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeEsXaiDelayPeriod",
      "unstakeEsXaiDelayPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakeGenesisKeyDelayPeriod(): BigInt {
    let result = super.call(
      "unstakeGenesisKeyDelayPeriod",
      "unstakeGenesisKeyDelayPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_unstakeGenesisKeyDelayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeGenesisKeyDelayPeriod",
      "unstakeGenesisKeyDelayPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakeKeysDelayPeriod(): BigInt {
    let result = super.call(
      "unstakeKeysDelayPeriod",
      "unstakeKeysDelayPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_unstakeKeysDelayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeKeysDelayPeriod",
      "unstakeKeysDelayPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateRewardBreakdownDelayPeriod(): BigInt {
    let result = super.call(
      "updateRewardBreakdownDelayPeriod",
      "updateRewardBreakdownDelayPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_updateRewardBreakdownDelayPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateRewardBreakdownDelayPeriod",
      "updateRewardBreakdownDelayPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userToInteractedPoolIds(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userToInteractedPoolIds",
      "userToInteractedPoolIds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_userToInteractedPoolIds(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userToInteractedPoolIds",
      "userToInteractedPoolIds(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validateSubmitPoolAssertion(pool: Address, user: Address): boolean {
    let result = super.call(
      "validateSubmitPoolAssertion",
      "validateSubmitPoolAssertion(address,address):(bool)",
      [ethereum.Value.fromAddress(pool), ethereum.Value.fromAddress(user)],
    );

    return result[0].toBoolean();
  }

  try_validateSubmitPoolAssertion(
    pool: Address,
    user: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateSubmitPoolAssertion",
      "validateSubmitPoolAssertion(address,address):(bool)",
      [ethereum.Value.fromAddress(pool), ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class CalculateUserTotalStakeCall extends ethereum.Call {
  get inputs(): CalculateUserTotalStakeCall__Inputs {
    return new CalculateUserTotalStakeCall__Inputs(this);
  }

  get outputs(): CalculateUserTotalStakeCall__Outputs {
    return new CalculateUserTotalStakeCall__Outputs(this);
  }
}

export class CalculateUserTotalStakeCall__Inputs {
  _call: CalculateUserTotalStakeCall;

  constructor(call: CalculateUserTotalStakeCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class CalculateUserTotalStakeCall__Outputs {
  _call: CalculateUserTotalStakeCall;

  constructor(call: CalculateUserTotalStakeCall) {
    this._call = call;
  }
}

export class ClaimFromPoolsCall extends ethereum.Call {
  get inputs(): ClaimFromPoolsCall__Inputs {
    return new ClaimFromPoolsCall__Inputs(this);
  }

  get outputs(): ClaimFromPoolsCall__Outputs {
    return new ClaimFromPoolsCall__Outputs(this);
  }
}

export class ClaimFromPoolsCall__Inputs {
  _call: ClaimFromPoolsCall;

  constructor(call: ClaimFromPoolsCall) {
    this._call = call;
  }

  get pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimFromPoolsCall__Outputs {
  _call: ClaimFromPoolsCall;

  constructor(call: ClaimFromPoolsCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get _delegateOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _keyIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _shareConfig(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _poolMetadata(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get _poolSocials(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }

  get trackerDetails(): Array<Array<string>> {
    return this._call.inputValues[5].value.toStringMatrix();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class CreateUnstakeEsXaiRequestCall extends ethereum.Call {
  get inputs(): CreateUnstakeEsXaiRequestCall__Inputs {
    return new CreateUnstakeEsXaiRequestCall__Inputs(this);
  }

  get outputs(): CreateUnstakeEsXaiRequestCall__Outputs {
    return new CreateUnstakeEsXaiRequestCall__Outputs(this);
  }
}

export class CreateUnstakeEsXaiRequestCall__Inputs {
  _call: CreateUnstakeEsXaiRequestCall;

  constructor(call: CreateUnstakeEsXaiRequestCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateUnstakeEsXaiRequestCall__Outputs {
  _call: CreateUnstakeEsXaiRequestCall;

  constructor(call: CreateUnstakeEsXaiRequestCall) {
    this._call = call;
  }
}

export class CreateUnstakeKeyRequestCall extends ethereum.Call {
  get inputs(): CreateUnstakeKeyRequestCall__Inputs {
    return new CreateUnstakeKeyRequestCall__Inputs(this);
  }

  get outputs(): CreateUnstakeKeyRequestCall__Outputs {
    return new CreateUnstakeKeyRequestCall__Outputs(this);
  }
}

export class CreateUnstakeKeyRequestCall__Inputs {
  _call: CreateUnstakeKeyRequestCall;

  constructor(call: CreateUnstakeKeyRequestCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateUnstakeKeyRequestCall__Outputs {
  _call: CreateUnstakeKeyRequestCall;

  constructor(call: CreateUnstakeKeyRequestCall) {
    this._call = call;
  }
}

export class CreateUnstakeOwnerLastKeyRequestCall extends ethereum.Call {
  get inputs(): CreateUnstakeOwnerLastKeyRequestCall__Inputs {
    return new CreateUnstakeOwnerLastKeyRequestCall__Inputs(this);
  }

  get outputs(): CreateUnstakeOwnerLastKeyRequestCall__Outputs {
    return new CreateUnstakeOwnerLastKeyRequestCall__Outputs(this);
  }
}

export class CreateUnstakeOwnerLastKeyRequestCall__Inputs {
  _call: CreateUnstakeOwnerLastKeyRequestCall;

  constructor(call: CreateUnstakeOwnerLastKeyRequestCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateUnstakeOwnerLastKeyRequestCall__Outputs {
  _call: CreateUnstakeOwnerLastKeyRequestCall;

  constructor(call: CreateUnstakeOwnerLastKeyRequestCall) {
    this._call = call;
  }
}

export class EnableStakingCall extends ethereum.Call {
  get inputs(): EnableStakingCall__Inputs {
    return new EnableStakingCall__Inputs(this);
  }

  get outputs(): EnableStakingCall__Outputs {
    return new EnableStakingCall__Outputs(this);
  }
}

export class EnableStakingCall__Inputs {
  _call: EnableStakingCall;

  constructor(call: EnableStakingCall) {
    this._call = call;
  }
}

export class EnableStakingCall__Outputs {
  _call: EnableStakingCall;

  constructor(call: EnableStakingCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get version(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RevokeStakeKeysAdminRoleCall extends ethereum.Call {
  get inputs(): RevokeStakeKeysAdminRoleCall__Inputs {
    return new RevokeStakeKeysAdminRoleCall__Inputs(this);
  }

  get outputs(): RevokeStakeKeysAdminRoleCall__Outputs {
    return new RevokeStakeKeysAdminRoleCall__Outputs(this);
  }
}

export class RevokeStakeKeysAdminRoleCall__Inputs {
  _call: RevokeStakeKeysAdminRoleCall;

  constructor(call: RevokeStakeKeysAdminRoleCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeStakeKeysAdminRoleCall__Outputs {
  _call: RevokeStakeKeysAdminRoleCall;

  constructor(call: RevokeStakeKeysAdminRoleCall) {
    this._call = call;
  }
}

export class SetFailedKycCall extends ethereum.Call {
  get inputs(): SetFailedKycCall__Inputs {
    return new SetFailedKycCall__Inputs(this);
  }

  get outputs(): SetFailedKycCall__Outputs {
    return new SetFailedKycCall__Outputs(this);
  }
}

export class SetFailedKycCall__Inputs {
  _call: SetFailedKycCall;

  constructor(call: SetFailedKycCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get failed(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFailedKycCall__Outputs {
  _call: SetFailedKycCall;

  constructor(call: SetFailedKycCall) {
    this._call = call;
  }
}

export class StakeEsXaiCall extends ethereum.Call {
  get inputs(): StakeEsXaiCall__Inputs {
    return new StakeEsXaiCall__Inputs(this);
  }

  get outputs(): StakeEsXaiCall__Outputs {
    return new StakeEsXaiCall__Outputs(this);
  }
}

export class StakeEsXaiCall__Inputs {
  _call: StakeEsXaiCall;

  constructor(call: StakeEsXaiCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeEsXaiCall__Outputs {
  _call: StakeEsXaiCall;

  constructor(call: StakeEsXaiCall) {
    this._call = call;
  }
}

export class StakeKeysCall extends ethereum.Call {
  get inputs(): StakeKeysCall__Inputs {
    return new StakeKeysCall__Inputs(this);
  }

  get outputs(): StakeKeysCall__Outputs {
    return new StakeKeysCall__Outputs(this);
  }
}

export class StakeKeysCall__Inputs {
  _call: StakeKeysCall;

  constructor(call: StakeKeysCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keyIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class StakeKeysCall__Outputs {
  _call: StakeKeysCall;

  constructor(call: StakeKeysCall) {
    this._call = call;
  }
}

export class StakeKeysAdminCall extends ethereum.Call {
  get inputs(): StakeKeysAdminCall__Inputs {
    return new StakeKeysAdminCall__Inputs(this);
  }

  get outputs(): StakeKeysAdminCall__Outputs {
    return new StakeKeysAdminCall__Outputs(this);
  }
}

export class StakeKeysAdminCall__Inputs {
  _call: StakeKeysAdminCall;

  constructor(call: StakeKeysAdminCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get keyIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get staker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class StakeKeysAdminCall__Outputs {
  _call: StakeKeysAdminCall;

  constructor(call: StakeKeysAdminCall) {
    this._call = call;
  }
}

export class UnstakeEsXaiCall extends ethereum.Call {
  get inputs(): UnstakeEsXaiCall__Inputs {
    return new UnstakeEsXaiCall__Inputs(this);
  }

  get outputs(): UnstakeEsXaiCall__Outputs {
    return new UnstakeEsXaiCall__Outputs(this);
  }
}

export class UnstakeEsXaiCall__Inputs {
  _call: UnstakeEsXaiCall;

  constructor(call: UnstakeEsXaiCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get unstakeRequestIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnstakeEsXaiCall__Outputs {
  _call: UnstakeEsXaiCall;

  constructor(call: UnstakeEsXaiCall) {
    this._call = call;
  }
}

export class UnstakeKeysCall extends ethereum.Call {
  get inputs(): UnstakeKeysCall__Inputs {
    return new UnstakeKeysCall__Inputs(this);
  }

  get outputs(): UnstakeKeysCall__Outputs {
    return new UnstakeKeysCall__Outputs(this);
  }
}

export class UnstakeKeysCall__Inputs {
  _call: UnstakeKeysCall;

  constructor(call: UnstakeKeysCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get unstakeRequestIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get keyIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UnstakeKeysCall__Outputs {
  _call: UnstakeKeysCall;

  constructor(call: UnstakeKeysCall) {
    this._call = call;
  }
}

export class UpdateDelayPeriodsCall extends ethereum.Call {
  get inputs(): UpdateDelayPeriodsCall__Inputs {
    return new UpdateDelayPeriodsCall__Inputs(this);
  }

  get outputs(): UpdateDelayPeriodsCall__Outputs {
    return new UpdateDelayPeriodsCall__Outputs(this);
  }
}

export class UpdateDelayPeriodsCall__Inputs {
  _call: UpdateDelayPeriodsCall;

  constructor(call: UpdateDelayPeriodsCall) {
    this._call = call;
  }

  get _unstakeKeysDelayPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _unstakeGenesisKeyDelayPeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _unstakeEsXaiDelayPeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _updateRewardBreakdownDelayPeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateDelayPeriodsCall__Outputs {
  _call: UpdateDelayPeriodsCall;

  constructor(call: UpdateDelayPeriodsCall) {
    this._call = call;
  }
}

export class UpdateDelegateOwnerCall extends ethereum.Call {
  get inputs(): UpdateDelegateOwnerCall__Inputs {
    return new UpdateDelegateOwnerCall__Inputs(this);
  }

  get outputs(): UpdateDelegateOwnerCall__Outputs {
    return new UpdateDelegateOwnerCall__Outputs(this);
  }
}

export class UpdateDelegateOwnerCall__Inputs {
  _call: UpdateDelegateOwnerCall;

  constructor(call: UpdateDelegateOwnerCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegate(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateDelegateOwnerCall__Outputs {
  _call: UpdateDelegateOwnerCall;

  constructor(call: UpdateDelegateOwnerCall) {
    this._call = call;
  }
}

export class UpdatePoolMetadataCall extends ethereum.Call {
  get inputs(): UpdatePoolMetadataCall__Inputs {
    return new UpdatePoolMetadataCall__Inputs(this);
  }

  get outputs(): UpdatePoolMetadataCall__Outputs {
    return new UpdatePoolMetadataCall__Outputs(this);
  }
}

export class UpdatePoolMetadataCall__Inputs {
  _call: UpdatePoolMetadataCall;

  constructor(call: UpdatePoolMetadataCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _poolMetadata(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _poolSocials(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class UpdatePoolMetadataCall__Outputs {
  _call: UpdatePoolMetadataCall;

  constructor(call: UpdatePoolMetadataCall) {
    this._call = call;
  }
}

export class UpdatePoolProxyDeployerCall extends ethereum.Call {
  get inputs(): UpdatePoolProxyDeployerCall__Inputs {
    return new UpdatePoolProxyDeployerCall__Inputs(this);
  }

  get outputs(): UpdatePoolProxyDeployerCall__Outputs {
    return new UpdatePoolProxyDeployerCall__Outputs(this);
  }
}

export class UpdatePoolProxyDeployerCall__Inputs {
  _call: UpdatePoolProxyDeployerCall;

  constructor(call: UpdatePoolProxyDeployerCall) {
    this._call = call;
  }

  get newDeployer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePoolProxyDeployerCall__Outputs {
  _call: UpdatePoolProxyDeployerCall;

  constructor(call: UpdatePoolProxyDeployerCall) {
    this._call = call;
  }
}

export class UpdateSharesCall extends ethereum.Call {
  get inputs(): UpdateSharesCall__Inputs {
    return new UpdateSharesCall__Inputs(this);
  }

  get outputs(): UpdateSharesCall__Outputs {
    return new UpdateSharesCall__Outputs(this);
  }
}

export class UpdateSharesCall__Inputs {
  _call: UpdateSharesCall;

  constructor(call: UpdateSharesCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _shareConfig(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UpdateSharesCall__Outputs {
  _call: UpdateSharesCall;

  constructor(call: UpdateSharesCall) {
    this._call = call;
  }
}
